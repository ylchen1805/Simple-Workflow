name: CI Checks

on:
  pull_request:
    branches:
      - main
      - dev
      - test
  push:
    branches:
      - main
      - dev
      - test

jobs:
  lint-check:
    name: Lint Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        continue-on-error: true

      - name: Run ESLint
        run: npm run lint || echo "⚠️ Lint check not configured yet"
        continue-on-error: true

      - name: Check code formatting
        run: npm run format:check || echo "⚠️ Format check not configured yet"
        continue-on-error: true

  ci-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        continue-on-error: false

      - name: Run integration tests
        run: npm run test:integration
        continue-on-error: false
        if: github.base_ref == 'dev' || github.base_ref == 'main'

      - name: Generate coverage report
        run: npm run test:coverage
        if: github.base_ref == 'main'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: github.base_ref == 'main'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  basic-lint:
    name: Basic Lint (Test Branch)
    runs-on: ubuntu-latest
    if: github.base_ref == 'test'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run basic lint
        run: npm run lint:basic
        continue-on-error: false

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        continue-on-error: false

      - name: Check build size
        run: |
          BUILD_SIZE=$(du -sh dist | cut -f1)
          echo "Build size: $BUILD_SIZE"

  branch-naming-check:
    name: Branch Naming Convention
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Check branch name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          
          # Skip check for permanent branches
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "dev" || "$BRANCH_NAME" == "test" ]]; then
            echo "Permanent branch, skipping naming check"
            exit 0
          fi
          
          # Check branch naming convention
          if [[ ! "$BRANCH_NAME" =~ ^(feat|fix|docs|refactor|perf|test|security|project)/.+ ]]; then
            echo "❌ Branch name '$BRANCH_NAME' does not follow naming convention!"
            echo "Expected format: <type>/<description>"
            echo "Valid types: feat, fix, docs, refactor, perf, test, security, project"
            exit 1
          fi
          
          echo "✅ Branch name follows convention: $BRANCH_NAME"

  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Check PR title format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          BASE_BRANCH="${{ github.base_ref }}"
          
          # Check title format based on target branch
          if [[ "$BASE_BRANCH" == "test" ]] && [[ ! "$PR_TITLE" =~ ^\[TEST\] ]]; then
            echo "⚠️  PR to test branch should start with [TEST]"
          elif [[ "$BASE_BRANCH" == "dev" ]] && [[ ! "$PR_TITLE" =~ ^\[DEV\] ]]; then
            echo "⚠️  PR to dev branch should start with [DEV]"
          elif [[ "$BASE_BRANCH" == "main" ]] && [[ ! "$PR_TITLE" =~ ^\[RELEASE\] ]]; then
            echo "⚠️  PR to main branch should start with [RELEASE]"
          else
            echo "✅ PR title format is correct"
          fi

      - name: Check PR description
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          
          if [[ -z "$PR_BODY" ]]; then
            echo "❌ PR description is empty! Please provide a description."
            exit 1
          fi
          
          echo "✅ PR has description"

  all-checks-passed:
    name: All Checks Status
    runs-on: ubuntu-latest
    needs: [lint-check, ci-tests, security-check, build-check, branch-naming-check, pr-validation]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint-check.result }}" == "failure" ]] || \
             [[ "${{ needs.ci-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.build-check.result }}" == "failure" ]] || \
             [[ "${{ needs.branch-naming-check.result }}" == "failure" ]] || \
             [[ "${{ needs.pr-validation.result }}" == "failure" ]]; then
            echo "❌ Some checks failed"
            exit 1
          fi
          echo "✅ All checks passed"
