name: Branch Management

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    types: [closed]
    branches:
      - main
      - dev
      - test

jobs:
  sync-test-from-dev:
    name: Sync Test Branch After Merge to Dev
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.base_ref == 'dev'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_PAT }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Sync test branch with dev
        run: |
          echo "🔄 Syncing test branch with dev..."
          
          git fetch origin
          git checkout test
          git reset --hard origin/dev
          git push origin test --force
          
          echo "✅ Test branch has been synced with dev"

      - name: Create notification comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ✅ Test Branch Synced with Dev
              
              The test branch has been automatically synchronized with dev.
              
              ### 📋 Action Required for Team Members
              
              If you have active feature branches based on test, please update them:
              
              \`\`\`bash
              git fetch origin
              git checkout your-feature-branch
              git rebase origin/test
              # If conflicts occur, resolve them then:
              git add .
              git rebase --continue
              # Finally push:
              git push origin your-feature-branch --force
              \`\`\`
              
              💡 See the [Quick Reference Guide](../blob/main/docs/QUICK_REFERENCE.md) for more details.`
            })

  sync-dev-and-test-from-main:
    name: Sync Dev and Test After Merge to Main
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.base_ref == 'main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_PAT }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Sync dev branch with main
        run: |
          echo "🔄 Syncing dev branch with main..."
          
          git fetch origin
          git checkout dev
          git reset --hard origin/main
          git push origin dev --force
          
          echo "✅ Dev branch has been synced with main"

      - name: Sync test branch with dev
        run: |
          echo "🔄 Syncing test branch with dev..."
          
          git checkout test
          git reset --hard origin/dev
          git push origin test --force
          
          echo "✅ Test branch has been synced with dev"

      - name: Create notification comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ✅ Dev and Test Branches Synced with Main
              
              Both dev and test branches have been synchronized with main.
              
              ### ⚠️ CRITICAL - Action Required for ALL Team Members
              
              This is a major sync that affects all feature branches. **Please complete the following steps within 24 hours:**
              
              #### Step 1: Update your local repository
              \`\`\`bash
              git fetch origin
              \`\`\`
              
              #### Step 2: Rebase your feature branches
              \`\`\`bash
              git checkout your-feature-branch
              git rebase origin/test
              \`\`\`
              
              #### Step 3: Resolve conflicts (if any)
              \`\`\`bash
              # After resolving conflicts in your editor:
              git add .
              git rebase --continue
              \`\`\`
              
              #### Step 4: Force push your updated branch
              \`\`\`bash
              git push origin your-feature-branch --force
              \`\`\`
              
              ### 🆘 Need Help?
              
              - If you encounter complex conflicts, see the [SOP document](../blob/main/docs/BRANCH_MANAGEMENT_SOP.md#handling-complex-conflicts)
              - Or reach out in the team chat for assistance
              
              **Note:** This notification means a release has been deployed to production. Please ensure your feature branches are updated before continuing development.`
            })

      - name: Post to Slack (optional)
        if: vars.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "⚠️ *IMPORTANT: Main branch updated*",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Dev and Test branches have been synced with Main*\n\nAll team members must rebase their feature branches within 24 hours.\n\nSee PR #${{ github.event.pull_request.number }} for details."
                  }
                }
              ]
            }'

  auto-delete-merged-branches:
    name: Auto Delete Merged Feature Branches
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.base_ref == 'test'
    
    steps:
      - name: Delete merged feature branch
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = context.payload.pull_request.head.ref;
            
            // Only delete feature branches (not permanent branches)
            if (branchName !== 'main' && branchName !== 'dev' && branchName !== 'test') {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branchName}`
                });
                
                console.log(`✅ Deleted merged branch: ${branchName}`);
                
                // Post confirmation comment
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `✅ Feature branch \`${branchName}\` has been automatically deleted after merge to test.`
                });
              } catch (error) {
                console.log(`❌ Failed to delete branch ${branchName}: ${error.message}`);
              }
            } else {
              console.log(`ℹ️  Skipped deletion of protected branch: ${branchName}`);
            }

  sync-branches-on-push:
    name: Sync Branches on Direct Push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_PAT }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Sync downstream branches
        run: |
          PUSHED_BRANCH="${{ github.ref_name }}"
          echo "📤 Direct push detected to: $PUSHED_BRANCH"
          
          # If main was updated, sync dev and test
          if [ "$PUSHED_BRANCH" == "main" ]; then
            echo "🔄 Syncing dev with main..."
            git fetch origin
            git checkout dev
            git reset --hard origin/main
            git push origin dev --force
            
            echo "🔄 Syncing test with dev..."
            git checkout test
            git reset --hard origin/dev
            git push origin test --force
            
            echo "⚠️  WARNING: Direct push to main detected!"
            echo "Consider using Pull Requests for better tracking."
          fi
          
          # If dev was updated, sync test
          if [ "$PUSHED_BRANCH" == "dev" ]; then
            echo "🔄 Syncing test with dev..."
            git fetch origin
            git checkout test
            git reset --hard origin/dev
            git push origin test --force
          fi
          
          echo "✅ Branch synchronization complete"

  stale-branch-check:
    name: Check for Stale Branches
    runs-on: ubuntu-latest
    # Run weekly on Monday at 9 AM
    # Can also be triggered manually or on push
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find and report stale branches
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Get all remote branches with their last commit date
            const branches = execSync('git for-each-ref --sort=-committerdate --format="%(refname:short)|%(committerdate:iso8601)|%(authorname)" refs/remotes/origin/')
              .toString()
              .trim()
              .split('\n')
              .filter(line => line)
              .map(line => {
                const [ref, date, author] = line.split('|');
                return { 
                  name: ref.replace('origin/', ''),
                  date: new Date(date),
                  author 
                };
              })
              .filter(b => !['main', 'dev', 'test'].includes(b.name));
            
            // Find branches older than 30 days
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            const staleBranches = branches.filter(b => b.date < thirtyDaysAgo);
            
            if (staleBranches.length === 0) {
              console.log('✅ No stale branches found');
              return;
            }
            
            // Create an issue to track stale branches
            let issueBody = `## 🧹 Stale Branch Cleanup Report\n\n`;
            issueBody += `Found **${staleBranches.length}** branches that haven't been updated in over 30 days:\n\n`;
            issueBody += `| Branch | Last Updated | Author |\n`;
            issueBody += `|--------|--------------|--------|\n`;
            
            staleBranches.forEach(b => {
              const daysAgo = Math.floor((new Date() - b.date) / (1000 * 60 * 60 * 24));
              issueBody += `| \`${b.name}\` | ${daysAgo} days ago | ${b.author} |\n`;
            });
            
            issueBody += `\n### 👉 Action Required\n\n`;
            issueBody += `Please review these branches and:\n`;
            issueBody += `- Delete branches that are no longer needed\n`;
            issueBody += `- Merge or rebase active branches\n`;
            issueBody += `- Contact branch owners if uncertain\n\n`;
            issueBody += `**To delete a branch:**\n`;
            issueBody += `\`\`\`bash\ngit push origin --delete branch-name\n\`\`\`\n`;
            
            // Create or update the stale branches issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'stale-branches'
            });
            
            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: issueBody
              });
              console.log(`Updated issue #${issues.data[0].number}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🧹 Stale Branches Need Cleanup',
                body: issueBody,
                labels: ['stale-branches', 'housekeeping']
              });
              console.log(`Created issue #${issue.data.number}`);
            }

  protect-permanent-branches:
    name: Branch Protection Reminder
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test')
    
    steps:
      - name: Check branch protection status
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            
            try {
              const protection = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branch
              });
              
              console.log(`✅ Branch ${branch} is protected`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`⚠️  WARNING: Branch ${branch} is NOT protected!`);
                console.log(`Please enable branch protection at:`);
                console.log(`Settings → Branches → Add branch protection rule`);
                
                // Post warning as issue comment if this was a PR merge
                if (context.eventName === 'pull_request') {
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: `⚠️ **Warning**: Branch \`${branch}\` is not protected. Please enable branch protection rules in repository settings.`
                  });
                }
              }
            }
